动画效果：
	显示与隐藏：
	.show(speed，callback)  //speed显示速度：可以为单词“slow”，“fast”，也可以为毫秒数；callback：动画执行完后的回调函数
	.hide(speed，callback)  
	-----------------------------------------------------------------------------------------------------------------
	淡入淡出：fade(褪色)
	.fadeIn(speed,callback)   			淡入
	.fadeOut(speed,callback)  			淡出
	.fadeToggle(speed,callback)			如果隐藏了，则会淡入，反之则会淡出，
	.fadeTo(speed,opacity,callback)		改变颜色。 speed 必须规定效果的时长。opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。
	------------------------------------------------------------------------------------------------------------------
	滑动：
	.slideDown(speed,callback)  		向下滑动
	.slideUp(speed,callback)			向上滑动
	.slideToggle(speed,callback)		如果元素向下滑动，则 slideToggle() 可向上滑动它们。反之亦然。
	------------------------------------------------------------------------------------------------------------------
	动画：
	.animate({params},speed,callback)用于创建自定义动画。 params 参数定义终点处的 CSS 属性
	------------------------------------------------------------------------------------------------------------------
	jQuery有一个动画队列的机制，会把触发的动画animate()置入，然后逐个运行，
	停止动画
	.stop(stopAll,goToEnd)；  
	
	注： 不填参数默认只停止当前正在进行的动画，停止当前动画后，队列中的下一个动画开始进行
		 stopAll 的参数为 true，这样就可以停止所有动画效果而不是只停止当前动画
		goToEnd
	
	---------------------------------------------------------------------------------------------------------------------
	断点调试：
	1.通过在代码中直接写debugger;来生成断点
	2.在控制台生成断点，
	
-----------------------------------------------------------------------------------------------------
jQuery样式操作：
	1.添加样式
		选择器.addClass（”样式类名“）
	2.删除样式
		选择器.removeClass（”样式类名“）// 样式不存在，不删除样式；若不填样式则删除所有样式。
	3.切换样式
		选择器.toggleClass("样式类名")   // 判断没有当前样式则添加，有就删除该样式

-----------------------------------------------------------------------------------------------------
jQuery链式调用
	(1).链式调用

        $("#mybtn").css("width","100px")

                .css("height","100px")

                .css("background","red");
				
	(2).以下是链式调用原理

	 var MyJQ = function(){
		   }
        MyJQ.prototype = {
            css:function(){
               console.log("设置css样式");
                return this;
            },
           show:function(){
                console.log("将元素显示");
               return this;
            },
           hide:function(){
                console.log("将元素隐藏");
           }
       };
        var myjq = new MyJQ();
        myjq.css().css().show().hide();			
	注意：
    css方法若传递一个参数可以获取属性名的属性值,当使用JQ中的方法取值是一般都无法进行链式调用,原因是方法内部return的已经不是JQ实例本身了


--------------------------------------------------------------------------------------------------------------------------------------------
jQuery遍历-同胞	
	.siblings() 方法返回被选元素的所有同胞元素
	.next() 方法返回被选元素的下一个同胞元素。
	.nextAll() 方法返回被选元素的所有跟随的同胞元素。
	nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素
	prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素
--------------------------------------------------------------------------------------------------------------------------------------------
操作属性：
	一、attr
		1.设置属性
			选择器.attr("属性名","属性值")
		2.获得属性
			选择器.attr("属性名")  //若没有返回undefault
		3.移除属性
			选择器.removeAttr("属性名")
	二、prop
		1.设置属性
			选择器.prop("属性名","属性值")
		2.获得属性
			选择器.prop("属性名")  //若没有返回空字符串
		3.移除属性
			选择器.removeProp("属性名")
	二者的区别：
		对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。

		对于HTML元素我们自己自定义的DOM属性，在处理时，使用 attr 方法。

		具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()
--------------------------------------------------------------------------------------------------------------------------------------------		
操作内容：
	1.
		选择器.text() - 设置或返回所选元素的文本内容
	2.
		选择器.html() - 设置或返回所选元素的内容（包括 HTML 标记）
	3.
		选择器.val() - 设置或返回表单字段的值
-------------------------------------------------------------------------------------------------------------------------------------------------		
节点操作:
	jQuery添加元素：
		.append() - 在被选元素的结尾插入内容
		.prepend() - 在被选元素的开头插入内容
		.after() - 在被选元素之后插入内容
		.before() - 在被选元素之前插入内容
-------------------------------------------------------------------------------------------------------------------------------------------------
jQuery创建元素：
		.append("<p>.....<p/>")
-------------------------------------------------------------------------------------------------------------------------------------------------
height和width
	.height();
	.width();    // 拿到的是 number 类型，只拿到数值，不拿px
		
	.css("height")  //拿到的是 string 类型， 300px

读取/设置top/left
	
	.offset()  //返回一个对象{top："",left：“”}	； 设置值时会变成相对定位
	.position()  //只能读，不能写
	------------------------------------------------------------------------------------------
拿到/设置滚动条的值	
	scrollTop(num)  //拿到滚动条顶部的位置
	
	scrollLeft(num) //拿到滚动条左部的位置



------------------------------------------------------------------------------------------
绑定多个事件：
	对象.bind({
		{参数},
		"click": function(e){
			...
			e.data;              //拿到 {参数}  
		},
		"mouseenter": function(){
		...
		}
	})
	--------------------------------------------------------------------------
	事件只触发一次：
		对象.one("click",function (){
			......
		})

--------------------------------------------------------------
	event.stopPropagation()		//阻止事件冒泡
	event.preventDefault(); 		//阻止默认行为
























