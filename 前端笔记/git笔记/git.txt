
github克隆项目：
	1.打开 Git Bash Here
	2.切换本地仓库
	 方法一
		1）cd f:\
		2) cd 文件名
		3）git init       	// 初始化本地仓库
		4）git clone url [--depth 1]  	// url为项目地址  避免报错导致下载终止：在clone后面加上参数:--depth 1，设置clone深度为1，来解决这个问题
	 方法二
		1）创建文件夹
		2）进入文件夹然后右击 选择 Git Bash Here
		3）git init       	// 初始化本地仓库
		4）git clone url [--depth 1]  	// url为项目地址  避免报错导致下载终止：在clone后面加上参数:--depth 1，设置clone深度为1，来解决这个问题





	---------------------------------------------------------------------------------------
	1.注册码云账号
	2.配置ssh公钥
		和github一样，如果我们只是单纯的从上面clone代码，并不需要ssh配对。
		但是我们是为了将项目代码提交到上面，所以还是需要ssh key的配对，操作和github配对方法是一样的。
	3.检测ssh，一般我们把git安装后都是安装了ssh的，我们可以通过git查看， 
	  随便找个地方，鼠标右键选择git bash here，进去git界面后输入 ssh，如果出现如图所示的情况，则说明ssh已经安装。
	4.把ssh导入出来，同样随便找个地方，输入ssh-keygen -t rsa， 然后回车，注意看ssh保存的位置
	5.这个id_rsa是私钥，我们放在这里自己用的，这个id_rsa.pub是要把它打开。
	6.码云上配置公钥。登陆码云打开个人中心找到配置ssh的地方。然后将id_rsa.pub打开的内容直接复制到公钥框里，标题那不用填，
	  复制进去后会自动生成的，注意这里什么都不要动，就是一个粘贴复制。
	7.验证ssh
		任意位置，右击选择Git Bash Here,打开后输入 ssh -T git@git.oschina.net。
		会提示你这个链接的码云不确定，问我们要不要急需链接，我们输入 yes ，然后提示你 welcome ，则表示我们成功。
	8.创建私人仓库
	9.链接到码云的地址。任意位置，右击选择Git Bash Here,打开后输入 git remote add origin 项目的ssh/https。
	10.拉取码云上的所有文件到项目中来，git pull origin master

	每次修改代码必先要拉取一下，
	git pull 
	11. git add .  (将修改添加到暂存区)
	12. git commit -m "描述"  （命令用于将更改记录(提交)到存储库）
	13. git push origin master （推送(Push)操作将数据永久存储到Git仓库。成功的推动操作后，其他开发人员可以看到新提交的变化。）
	
	更新分支 git fetch
	
	查看分支 git branch
	
	切换分支 git checkout 分支名
	注意：
		github默认不允许push空文件夹，所以你只add一个空文件夹是push不上去的。
---------------------------------------------------------------------------------------------------------------------------
基本使用
	 1.准备工作:本地仓库和远端仓库建立唯一连接
	 2.克隆代码:下载一个项目以及所有代码历史
		$ git clone [url]
	 3.初始化仓库:
		$ git init
	4.提交暂存区:将代码先提交给暂存区
		$ git add [file1] .../[dir]/ .
	5.推到远端仓库:将暂存区的代码推到远端仓库	
		# 取回远程仓库的变化，并与本地分支合并。防止覆盖他人代码。
		$ git pull [remote] [branch]

		# 上传本地指定分支到远程仓库
		$ git push [remote] [branch]

		# 强行推送当前分支到远程仓库，即使有冲突
		$ git push [remote] --force

		# 推送所有分支到远程仓库
		$ git push [remote] --all

		# 恢复暂存区的所有文件到工作区
		$ git checkout .

 克隆:远端仓库->工作区

     提交:工作区->暂存区->本地仓库->远端仓库
--------------------------------------------------------------------------------------------
commit的文件，在推送到远程仓库时报冲突。
	是因为当前代码版本不是最新的版本，即别人提交代码后自己没拉取就继续改了。
	此时应该拉取远程的代码，该文件会有双方的更改，此时head下边为自己的代码，=====下边为别的代码。
	把两端代码比较，将双方写的代码都保留。
回滚区块：
		将已提交的文件还原到未修改是的状态 === 在工作区将刚才对代码的操作都撤回，此时文件状态为未暂存文件。
	