复习函数和作用域:
	函数:
		
		
		fn();
		function fn(){    //未声明类型,默认全局
			...
		}
		
		fn1();    // 调用不到,必须先声明后调用
		var fn1(){
			...
		}
	-----------------------------------------------------------------------------------------------------------------		
	变量:
		var key = 0 ;              //全局变量
		function num (){
			var num = 0 ;         // 局部变量,只能在 num函数中使用
		}
-------------------------------------------------------------------------------------------------------------------------------------
闭包:
	一、
		闭包函数：声明在一个函数中的函数，叫做闭包函数。

		闭包：内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。
	二、特点
		  让外部访问函数内部变量成为可能；

		  局部变量会常驻在内存中；

		  可以避免使用全局变量，防止全局变量污染；

		  会造成内存泄漏（有一块内存空间被长期占用，而不被释放）

	三、闭包的创建：­­­
		闭包就是可以创建一个独立的环境，每个闭包里面的环境都是独立的，互不干扰。闭包会发生内存泄漏，每次外部函数执行的时候，外部函数的引用地址不同，都会重新创建一个新的地址。但凡是当前活动对象中有被内部子集引用的数据，那么这个时候，这个数据不删除，保留一根指针给内部活动对象。

		闭包内存泄漏为： key = value，key 被删除了 value 常驻内存中; 局部变量闭包升级版（中间引用的变量） => 自由变量；


		可以用一个函数去访问另外一个函数的内部变量的方式	
		
		例:
		  function run() {
			var num = 11;
			return num;
		  }
		  var lala = run();
		  //想要拿到无嵌套函数中的运行结果,直接在函数中return 运行结果,
		  console.log(lala);
		---------------------------------------------------------------------------------------------------------------
		  function makeAdder(x) {
			  return function(y) {
				return x + y;
			  };
			}

			var add5 = makeAdder(5);    ->     add5 = function(y) {return 5 + y; };
			var add10 = makeAdder(10);    ->     add10 = function(y) {return 10 + y; };

			console.log(add5(2));  // 7
			console.log(add10(2)); // 12
		//两个函数嵌套,现在想要拿到内层函数的运行结果,就要用到闭包,

		 
		从本质上讲，makeAdder 是一个函数工厂 — 他创建了将指定的值和它的参数相加求和的函数。
		在上面的示例中，我们使用函数工厂创建了两个新函数 — 一个将其参数和 5 求和，另一个和 10 求和。
		
		
		
		-----------------------------------------------------------------------------------------------------------------------------
		理解闭包需要对函数、作用域以及作用域链有着扎实深入的理解，
			
		一、作用域
		　　   在 Javascript 中，作用域分为 全局作用域 和 函数作用域
		　　全局作用域：
		　　　　	代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。
		 　 函数作用域：
		　　　	　在固定的代码片段才能被访问
			
		二、作用域链
			在书面程序内，每个变量的作用域都通过作用域链连接起来，全局作用域总是位于该链的顶端。JavaScript编译器从尾到头遍历这条链。
			一般情况下，变量取值到 创建 这个变量 的函数的作用域中取值。但是如果在当前作用域中没有查到值，就会向上级作用域去查，
			直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。
		
			
			var a =10;
				function fn() {
					var b =20;
					function bar(){
						console. log(a + b) ;   //运算时a会从bar函数查值,查不到,就往上从fn函数中找,没有就继续往上找
					}
					return bar;
				}
				
				var x =fn(),
				b = 200;
				x();
------------------------------------------------------------------------------------------------------------------------
截流:
	事件很短时间触发多次,有过超时定时器让他停留一点时间再去触发,
		
		
		
					
		
		