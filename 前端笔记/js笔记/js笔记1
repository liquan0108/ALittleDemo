轮播图、选项卡、地图、表单验证等
	
	web前端三层来说:。
		结构层
			HTML
			从语义的角度，描述页面结构。
		样式层
			CSS
			从审美的角度，美化页面。
		行为层
			JavaScript
			从交互的角度，提升用户体验
			js就是控制结构和样式的
------------------------------------------------------------------------------------------------------------
JavaScript和ECMAScript	
	ECMAScript是JavaScript语言的标准
	
	JavaScript是门语言
	-----------------------------------------------------------------------------------------------------------------
	写在body里
	-----------------------------------------------------------------------------------------------------------------
	一、创建项目文件夹结构->(站点)
		1.首页   index.html
		2.样式  css文件夹 -> css文件  -> 相同样式 (全局样式/公共样式 base.css global.css) 
		3.图片  images文件夹
	二、初始化页面(css)
	三、引入css
	
	
	版心(也叫可视区)

------------------------------------------------------------------------------------------------------------
 输出语句:
	1.window.alert()  弹出警示框
			window 对象可省略
		各浏览器产生弹框样式不同	
	2.console 控制台输出
		console.log()	普通输出
		console.warn()  警示输出
		console.error()  错误输出

	3.document.write()  文档打印输出
			document 文档对象不可省略
	  直接在html打印出来
------------------------------------------------------------------------------------------------------------
获得dom元素:
		
		document.getElementById('id')            获得某个标签;   唯一一个,
		document.getElementsByTagName('标签名'); 获得某类标签;  多个,组成一个伪类数组,使用时必须使用for循环遍历/通过下标使用list[0]
				document.getElementById('id').getElementsByTagName('标签名');   获得id中的某种标签
					只有一个document
	--------------------------------------------------------------------------------------------------------
添加自定义属性:
		通过.getElement...获得的元素都是object对象,  
		可直接通过  .附加属性名   的方法直接给对象添加自定义属性
		例: 
			var box = document.getElementById('id')
				box.fjsxm = "lalalala"
			console.log(box.fjsxm)		 =>   "lalalala"
------------------------------------------------------------------------------------------------------------
JS原生控制样式:
	1.获得元素
		document.getElementById()
		
	2.修改样式
		document.getElementById().style.width = ...



------------------------------------------------------------------------------------------------------------
变量:
	var声明的只在本标签和子标签中作用
	同时声明两个变量
		var a = 10,b = 100;
			a,b均为var类型
	-----------------------		
		var num1 = num2 = 2;  
			num1为局部变量,
			未给num2声明变量类型, num2为全局变量

------------------------------------------------------------------------------------------------------------
事件三要素:
	事件源  事件开始的源头
	事件	
		onclick			单击时
		ondblclick		双击时
		onkeyup			键盘键位抬起时
		onchange		文本区域/下拉菜单改变时
		onfocus  		获得焦点
		onblur			焦点失去
		oninput         输入事件
		
		onmouseover		鼠标悬停  
		onmouseout		鼠标移出       (鼠标进入指定元素触发事件，含子元素区域。)
		
		onmousemove     鼠标移动 只要移动就会触发  
		
		onmouseenter：    移入事件。    (鼠标进入到指定元素区域内触发事件，不支持冒泡，不包含子元素的区域。)
		onmouseleave：    移出事件。
		onload			网页文档加载时
		onunload		关闭网页时
		onsubmit		表单提交时
		onreset        重置表单时
		
	事件处理函数   function name () {}


	事件源.事件 = 时间处理函数
	getElementById().onclick = function name () {
			getElementById().style.width = "50px";
	}

------------------------------------------------------------------------------------------------------------
显示/隐藏;
  隐藏:	dispaly:	none;     隐藏后不占位 
	    visibility: hidden;   隐藏后占位置      

	显示: dispaly:block;
		  visibility: visible;

------------------------------------------------------------------------------------------------------------
js入口函数: 一个文件只能写一次
<script>
	window.onload =function() {  
		js内容...                      window.onload -> dom加载完后,在加载自动加载js,不能用于行内式js,
									   因为行内式js会随着dom的加载而加载对应function函数,window.onload会报undefault
	}
</script>
------------------------------------------------------------------------------------------------------------
写遮罩:
	定义一个 固定定位的盒子,宽高100%,背景颜色半透明,
------------------------------------------------------------------------------------------------------------
padding:
	继承的宽度,使用padding-left不会撑开盒子,
	但是自己写宽度时,使用padding会撑开盒子
------------------------------------------------------------------------------------------------------------
JS书写位置:
	行内式:
		<button onclick="run()" >
		<a href="javascript:;">

	内嵌式:
		<script type="text/javascript"> 
			......
		</script>
	外链式: 
		<script scr="js的相对路径" type="text/javascript"> </script>
------------------------------------------------------------------------------------------------------------
JS数据类型:
	js是弱数据类型,
	有字符型,
	数值型, 若数值前以0开头,则为8进制数;0x开头的为16进制数
	布尔型,(false,undefined,null,0," ")都为false; (true,1,"something",[Object])都为true
	null,
	undefined
	
	检测数据类型:	typeof 变量 
	
	数据类型转换:
		转换成字符型: ".."/ String()
		转换成数值型:  + - * %
				var num = "10"
				var zh = num-0
					console.log(typeof zh)
	ParseInt(值,进制); 转换成整数
		console.log(parseInt("25px")) => 25
	
		parseInt(10 , 2) => 2(十进制)
			把 二进制的10 转换成十进制,
















