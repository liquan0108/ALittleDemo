函数:
	可重复使用的代码块
------------------------------------------------------------------------------------------------
函数声明:
	自定义函数	
	function run() {
		...
	}
	函数直接量声明
	var fun = function() {
		.....
	}
------------------------------------------------------------------------------------------------
变量提升:
	在函数体内声明变量,会把该声明提升到函数体顶端,值提升变量声明,不提升赋值
	<script>							<script>
		var a = 100;						var a = 100;
		function run () {					function run () {			
			console.log(a) undefault ===>	    var a;            a将上边a = 1000覆盖掉;
			var a = 10;       					console.log(a);		->undefault
		}										a = 10;
											}
	</script>
------------------------------------------------------------------------------------------------
	函数传参:
	---------------------------------------------------	
	传参传的是值而不是地址。
		f1(1,2)    实参
		
		function f1(a, b){			形参
				console.log(a+b)
		}
	---------------------------------------------------
	参数个数不匹配:
		f1(1)
		
		function f1(a,b){
			console.log(a+b)   ->	NUN
		}
	
	-----------------------------------------------------
	判断参数个数是否匹配
		fn.length  得到函数fn的形参个数
		
		arguments.length  得到的实参的个数
------------------------------------------------------------------------------------------------
返回值:
		返回函数运行结果,
		终止代码继续向下执行
------------------------------------------------------------------------------------------------
a++/++a:
		a++ 先用在运算
		++a 先运算再用
	
	2 + (a++)  =>  2 + a  被括号包括的a++也是先用再加加
------------------------------------------------------------------------------------------------
条件语句:
		1.if(){
			...
		}
		2.if(){
			...
		}	else{
			...
		}
		3.if(){
			...
		}else if () {
			...
		}	else {
			..
		}	
------------------------------------------------------------------------------------------------
多分支语句:
	switch(key) {
	
	case value1:    参数为字面量             key和value1匹配时会执行语句1
		 语句1;
		 break;
		
		................................
		
	default:       都不匹配时执行
		语句;	
		break;
	
	}
---------------------------------------------------------------------------------------------------
className
		元素.className 得到/改变类名
-------------------------------------------------------------------------------------------------------		
innerHTML
		获取对象的内容
		向对象中插入内容
			<div>
				111111     内容
			</div>
----------------------------------------------------------------------------------------------------
js方法:	
	获得焦点:
		对象.focus();
	选择对象中的所有内容:
		对象.select();
	-----------------------------------
	 window.onload = function () {
        var ipt = document.getElementById("ipt");
        ipt.focus();                                  js加载完后自动获得焦点
        ipt.onfocus = function () {
          ipt.select();								获得焦点后,全选里边的内容,按一下删除键即可全部删除	
        };
      };
	
	
	
	
	
	
	
	
	