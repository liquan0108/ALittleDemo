js内置对象:
		1.日期对象: Date()
			可以得到本地的日期
		  1.1 声明日期函数
		  var date = new Date();
		  1.2 常用方法
		   1)返回毫秒数
			 从1970年1月1日到当前日期的毫秒数
				 .getTime();
				 .valueOf();
			 获取当前的毫秒数
				 .getMilliseconds()
		  2)获取年月日星期
			.getFullYear();  获取完整年份(浏览器都支持)
			.getMonth();	 获取月 0 - 11 个月
			.getDate();		 获取日 1 - 31 
			.getDay();		 获取星期 0 - 6
		  3)获取时分秒
			.getHours();     获取小时 0 - 23
			.getMinutes();	 获取分钟 0 - 59
			.getSeconds();	 获取秒   0-59
-----------------------------------------------------------------------------------------------------		  
js定时器:
	JavaScript是单线程语言，实际上浏览器负责进行排序，指派某段程序在某个时间点运行的优先级。这就意味着定时器仅仅是计划代码在未来的某个时间执行，而具体执行时机是不能保证的， 
	定时器注意问题:
		JavaScript是单线程执行的，也就是无法同时执行多段代码，
		当某一段代码正在执行的时候，所有后续的任务都必须等待，
		形成一个队列，一旦当前任务执行完毕，再从队列中取出下
		一一个任务。这也常被称为“ 阻塞式执行”
		如果代码中设定了一个setTimeout,那么浏览器便会在合适
		的时间，将代码插入任务队列，如果这个时间设为0，就代
		表立即插入队列，但不是立即执行，仍然要等待队列前面代码执
		行完毕。所以setTimeout并不能保证执行的时间，是否及
		时执行取决于JavaScript线程是拥挤还是空闲。


		1.简写调用
			setInterval(执行的函数,超时值(毫秒) );   超时值是指在指定时间之后执行代码，循环执行
			每隔几毫秒,去执行一次函数
			1.1停止定时器:
			 var  intv = setInterval()
			 clearInterval(intv)
		2.超时调用
			setTimeout(执行函数, 间歇时间值 )  间歇时间值是指每隔指定的时间就执行一次代码
		2.1停止定时器:
		var  to = setTimeout()
			clearTimeout(to)
		 
		注:
			1.启动定时器前若无唯一的判断,则要先清除,因为多次点击会启动多个定时器
			2.通常情况下，很少真正使用间歇调用，因为后一个间歇调用可能在前一个间歇调用结束之前调用。因此，我们通常会使用 setTimeout()中的函数再次调用setTimeout()来模拟间歇调用(递归)
				例:
					function fn() {
					  if (num-- > 0) {
						box.innerHTML = "页面没有找到 " + num + "秒后将会带您进入首页";
						setTimeout(fn, 1000);          // 这是最里层的超时定时器
					  } else {
						window.location.href = "http://www.baidu.com";
					  }
					}
					setTimeout(fn, 1000);
					
				!!!!!!!!!!!!!!!!!!若想要提前关闭定时器,则要关闭最里层的超时定时器
		---------------------------------------------------------------------------------------------------------------------------	
				1)setInterval()无视代码错误	
					如果setInterval执行的代码由于某种原因出了错，它还会持续不断（不管不顾）地调用该代码。
				2)setInterval无视网络延迟
					假设你每隔一段时间就通过Ajax轮询一次服务器，看看有没有新数据。而由于某些原因（服务器过载、临时断网、流量剧增、用户带宽受限，等等），
					你的请求要花的时间远比你想象的要长。但setInterval不在乎。它仍然会按定时持续不断地触发请求，最终你的客户端网络队列会塞满Ajax调用。
				3)setInterval不保证执行
			  setInterval(),每隔固定时间就调用一次函数,不管函数有没有执行完毕
			  setTimeout(), 隔几秒后去调用函数,只会调用一次
-----------------------------------------------------------------------------------------------------		  
transform(变换):
	旋转:
		rotate("30deg")	定义 2D 旋转，在参数中规定角度(deg)。
		  
		  
		  
		  
		  
			