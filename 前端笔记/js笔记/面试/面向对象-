面向对象：
	类与继承:
	如何实现继承
	继承的几种方式
	
	如何实现继承:
		构造函数:
			function Parent(){
				this.age = age;
			}
			function todo(){
				Parent.call(this); //间接调用函数，改变this的指向，缺点：不会继承Parent原型链上的属性。
				this.name = name;
			}
		原型链：
			function Parent(){
				this.age = age;
			}
			function todo(){
				this.name = name ;
			}
			
			todo.prototype = new Parent();  // 构造函数的prototype指向Parent()实例。通过构造函数new出来的todo的_proto_属性指向Parent()实例，
												即原型对象为Parent()实例，所以会继承原型链上的属性。
			缺点：所有构造函数new出来的实例对象，共用同一个原型对象new Parent()，修改原型对象上的属性时，同时生效。
			
			var s1 = new todo();
			var s2 = new todo();
			
			s1.__proto__ === s2.__proto__   // return true；
		组合方式1：
			function Parent() {
				this.age = age;
			}
			
			function todo() {
				Parent.call(this);  // 缺点： 构造函数执行第一次。
				this.name = name;
			}
			todo.prototype = new Parent(); // 构造函数执行第二次。
			-----优化1-----
			todo.prototype = Parent.prototype;    // 该方法只执行一次 缺点：生成的实例的constructor都指向父构造函数，无法区分实例是父还是自身构造函数创建。
			-------优化2-----
			todo.prototype = Object.create(Parent.prototype);  //创建一个中间对象它的__protp__指向Parent的原型对象。
			todo.prototype.constructor = todo;   // 重新赋值自构造函数
			
			------------------
			----原型对象-----
			------------------
					↑  __proto__
					↑
			------------------
			----中间对象------
			------------------
					↑	__proto__
					↑
			------------------ 	   	todo.prototype.constructor	------------------
			--todo.prototype--    	 →→→→ 		 →→→→  	 →→→→ 	--------todo-------
			------------------									------------------

	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	类与实例：
	类的声明
	生成实例

	类的声明：
		function move(){
		this.name = name;
		}

		ES6中的class的声明
		
		class move(){
			constructor(){
				this.name = name;
			}
		}


	生成实例:
		new move();



