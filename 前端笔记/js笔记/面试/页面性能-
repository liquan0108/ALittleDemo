
	提升页面性能的方法有哪些
		1、资源压缩合并，减少HTTP请求
		2、非核心代码导步加载--->异步加载的方式--->异步加载的区别
		3、利用浏览器缓存--->缓存的分类--->缓存的原理
		4、使用CDN
		5、预解析DNS
		<meta http-equiv="x-dns-prefetch-control" content="on">
		<link rel="dns-prefetch" href="//host_ _name_ _to_ _prefetch.com">
		a标签默认是预解析的，但是页面是https协议开头的，很多浏览器是默认关闭预解析
	--------------------------------------------------------------------------------------------			
	。异步加载的方式：
		1.动态加载
		2.defer
		3.async
	--------------------------------------------------------------------------------------------		
	。异步加载的异同
		相同点：
			将和后续文档元素的加载同时进行（加载并不等于执行）；
		区别：
		1) defer是 在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行。
			注意：当脚本都加载完成后才会按照顺序执行
　　		适用：当脚本之间有相互依赖时非常合适
			<script src="./defer1.js" defer></script>   首先加载defer1    加载完成后按加载顺序依次执行
			<script src="./defer2.js" defer></script>	然后加载defer2
			<script src="./defer3.js" defer></script>	最后加载defer3
		2) async是在加载完之后立即执行，不管html是否解析完成，如果是多个，谁先加载完成谁先执行。即同一个js文件的执行紧挨着加载的，加载完毕就执行	
			<script async src="demo3.js"></script>
			<script async src="demo4.js"></script>
			适用：对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的
	--------------------------------------------------------------------------------------------			
	。缓存的分类：
		缓存就是。对最近请求过的文档进行存储，存储到本地磁盘。
		。强缓存：
			不会向服务器发送请求，直接从缓存中读取资源。请求状态码可以看到(Status Code: 200  (from disk cache))
			强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。如都出现，以后者为准。
			Expires:
				缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点,过期后需要再次请求。。
				Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。
			Cache-Control：
				在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存。
				Cache-Control:max-age=300,表示300秒后缓存过期。
		---------------------------------------------------------------------------------------		
		。协商缓存：
			强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。
			协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。
			
			Last-Modified和If-Modified-Since:
			浏览器在第一次访问资源时，服务器返回资源的同时，在response header中添加 Last-Modified的header，值是这个资源在服务器上的最后修改时间。浏览器接收后缓存文件和header；
			强制缓存失效后，浏览器携带If-Modified-Since向服务器发起请求，服务器会根据 If-Modified-Since 中的值与服务器中这个资源的最后修改时间对比，
			如果没有变化，返回304和空的响应体，直接从缓存读取，如果If-Modified-Since的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和200。
			一些弊端:
					如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改。
					因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件。
			ETag：
				Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。
				向服务器发送请求时，会将上一次返回的Etag值放到request header里的If-None-Match里，
				服务器只需要比较客户端传来的If-None-Match跟自己服务器上该资源的ETag是否一致，就能很好地判断资源相对客户端而言是否被修改过了。
