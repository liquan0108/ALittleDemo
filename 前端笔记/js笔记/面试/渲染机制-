渲染机制类
	什么是DOCTYPE及作用？
		DTD(文档类型定义)，告诉浏览器当前html/xml的文档类型，然后浏览器根据他来解析和渲染。
		
		DOCTYPE（文档类型），告诉浏览器当前的文档是哪个DTD（文档类型定义）。
	-------------------------------------------------------------------------------------------------------------	
	DOCTYPE的声明方式	
		HTML5:
			<!DOCTYPE html>
			
		HTML4.01 Strict(严格模式)   该DTD包含所有HTML元素和属性，但不包括展示性的和弃用的元素(比如font).

		HTML4.01 Transitional(过滤模式)   该DTD包含所有HTML元素和属性，包括展示性的和弃用的元素(比如font)
	
	-------------------------------------------------------------------------------------------------------------
	DTD类型：
		Strict(严格) : 干净的标记，免于表现层的混乱，与层叠样式表（CSS）配合使用。
		Transitional(过渡) :包含 W3C 所期望移入样式表的呈现属性和元素。使用不支持层叠样式表（CSS）的浏览器时使用。
		Frameset(Frameset) : 应当被用于带有框架的文档。除 frameset 元素取代了 body 元素之外，Frameset等同于 Transitional。
	-------------------------------------------------------------------------------------------------------------	
	浏览器渲染过程。
		1.浏览器解析HTML，得到一个DOM tree
		2.浏览器解析CSS，得到CSSOM tree
		3.DOM和CSSOM合并后生成Render Tree。
		4.布局（layout）。有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置大小等信息。
		5.绘制（Painting ）根据计算好的信息绘制整个页面
	-------------------------------------------------------------------------------------------------------------
	回流(Reflow)
			当某个部分发生了点变化影响了布局，导致需要重新构建页面的时候，回流就产生了。
			只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。
			通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。
	重绘(Repaint)
			改变某个元素的外观风格如：背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，就产生了重绘。
			
	回流一定会触发重绘，但重绘时不会一定会触发回流。
	-------------------------------------------------------------------------------------------------------------
	如何避免回流：
		1、不使用能够触发回流的属性；
		2、建立一个图层，让回流在图层里面进行，限制回流和重绘的范围，减少浏览器的运算工作量。
		3、合成一次重绘
	-------------------------------------------------------------------------------------------------------------
	Css是怎么“划分图层”的：
		在页面加载完dom之后，浏览器会根据自身制定的一些特殊css 属性对页面进行划分为一个个图层。例如position: absolute|fixed 。
	-------------------------------------------------------------------------------------------------------------
	图层的优点：
		当一个元素在自己的图层内发生变化时，他的回流和重绘只会在图层内发生变化，减少了浏览器的计算量。
	-------------------------------------------------------------------------------------------------------------
	
	布局(Layout)
	



