现在互联网前端三层:
	html  超文本标记语言   从语义的角度负责页面结构
	css   层叠式样式表     从审美的角度负责页面样式
	js    JavaScript       从交互的角度描述页面行为
--------------------------------------------------------------------------------------------------
在html中,css样式写在<head>标签里的<style>标签中,也可以直接写在作用的标签上,还可以写在单独的文件里(推荐)
	<style type='text/css'>标签:
		type属性: 表示类型,text表示纯文本,css也是纯文本。
	css对换行符不敏感,	对空格也不敏感。格式为:
		选择器 {
				k:v;
				k:v;
				k:v;
			}
	冒号和分号都不能省略	
--------------------------------------------------------------------------------------------------------
css常见属性:
		color: 字符颜色
		font-size: 字体尺寸,单位:像素。
		font-weight: bold 字体加粗, normal,不加粗 
		font-style: italic 斜体
		background-color: 背景颜色
		text-decoration: underline  下划线 
		line-height:         行高
		text-indent: 2em      缩进个汉字的宽度
		text-align:center;       使块级元素的文本居中
--------------------------------------------------------------------------------------------------------
选择器:
	标签选择器:
	  标签名{
			k:v;
	  }
		所有标签都可以是选择器。
		无论多深的标签都会被选择上。
		选择所有的某种标签,某种标签有共性样式时才使用。
	----------------------------------------------------------------------------------------------------
	id选择器:
		#id名 {
			k:v;
		}
		因为标签的id是唯一的,所以id选择器只会选择相对应的那个标签
		标签的id只能有数字、字母、下划线组成,大小写严格区分
	----------------------------------------------------------------------------------------------------------
	类选择器:
	.类名1{
		k:v;
	}
	.类名2{
		k:v;
	}	
	同一标签可能同属多个类,同时具备多个类的样式,类之间用空格隔开:	
	   <p class="类名1 类名2" >类选择器</p>
	若两个类具有相同的样式则显示css中后边那个定义的样式。
	在类中写样式时,不要试图一个类写完某个标签的所有样式,应该拆分以便重用。
		
	尽可能的用class,除非极特殊的情况可以用id,因为js中要通过id属性得到标签(getElementById())		
		一个标签，可以同时被多种选择器选择，标签选择器、id选择器、类选择器。这些选择器都可以选择上
	同一个标签，从而影响样式，这就是ecss 的cascading“层叠式”的第一层含义。。
	T
---------------------------------------------------------------------------------------------------------------------
css高级选择器
	
		<div class="div">
				<ul>
					<li>
						<p>段落</p>
						<p>段落</p>
						<p>段落</p>
					</li>
				</ul>
		</div>
	后代选择器:
		.div p{
			k:v;
		}
		选择div中的后代p标签,辈分之间用空格隔开	
-----------------------------------------------------------------------------------------------------------
交集选择器
	h3.name{
	   k:v;
	}
	选择h3标签中的类名为name的元素,中间不能有逗号			
	
	<h3 class="name" >lalala</h3>
	<h3>lalala</h3>
	<p class="name" >kakaka</p>
------------------------------------------------------------------------------------------------------------
并集选择器:
		h3,p{
		    color: red;
		}
	之间用逗号隔开
-------------------------------------------------------------------------------------------------------------
通配符 *
		*就表示所有元素
		*{
			k:v;
		}
----------------------------------------------------------------------------------------
css5选择器:
	1.儿子选择器:  ">"
		IE7开始兼容
		div>p{
			k:v;
		}
		
	<div>
		<p>
		   啦啦啦
		</p>
		<span>
		 kakaka 
		</span>
	</div>
	------------------------------------------------------------------------------------------
	2.伪类选择器:
		用于向某些选择器添加特殊的效果。
		给标签选择器a添加特殊效果。
		a:link {color: #FF0000}		/* 未访问的链接 */
		a:visited {color: #00FF00}	/* 已访问的链接 */
		a:hover {color: #FF00FF}	/* 鼠标移动到链接上 */
		a:active {color: #0000FF}	/* 选定的链接 */
		以上伪类同时使用时,要注意使用以上顺序,否则位置写错会无法显示效果
		"爱恨准则l v h a" love hate
		------------------------------------------------------------
		属性	      描述	                                     CSS
		:active	      向被激活的元素添加样式。	                  1
		:focus	      向拥有键盘输入焦点的元素添加样式。	      2
		:hover	      当鼠标悬浮在元素上方时，向元素添加样式。	  1
		:link	      向未被访问的链接添加样式。	              1
		:visited	  向已被访问的链接添加样式。	              1
		:first-child  向元素的第一个子元素添加样式。	          2
		:last-child   向元素的最后一个子元素添加样式
		:lang	      向带有指定 lang 属性的元素添加样式。	      2
		-------------------------------------------------------------
		例:
			<ul>
				<li>1</li>
				<li>2</li>
				<li>3</li>
				<li>4</li>
				<li>5</li>
				<li>6</li>
				<li>7</li>
			</ul>
			
			ul li:first-child{  // 选择ul后代中的第一个li
				k:v;
			}
		
		ul li:last-child{  // 选择ul后代中的最后一个li
			k:v;
		}
	
	---------------------------------------------------------------------------------------
	3.下一个兄弟选择器:  "+"
	h3+p{    // 选择h3标签的下一个标签
		k:v;
	}
	
	<h3></h3>
	<p><p/>
	<p><p/>
	<p><p/>
	<h3></h3>
	<p><p/>
	<p><p/>
	<h3></h3>
	<p><p/>
	<p><p/>
--------------------------------------------------------------------------------------------
css的继承性和层叠性
	继承性:
		有些属性当给某个标签设置的时候,自己的后代都继承了, 
		color、text-开头的、line-开头的、font-开头的。
		关于文字样式的都能继承;关于盒子的、定位的、布局的属性都不能继承 
	若页面全局都是某个字体、颜色可以给body标签设置此样式
	-----------------------------------------------------------------------------------------
	层叠性:
		当多个相同的样式属性同时选择了某一个标签上,权重小的会被覆盖,
		数权重:
			id选择器的数量,类选择器的数量,标签选择器的数量
		从id开始比较数量多少,多的权重大则生效,相同后比较类,再相同后比较标签,若都相等则谁写在后边谁生效	
		注:
			开始数权重之前要看是否选中了这个标签
			若不能直接选中某个元素,那么他的权重是0。(继承过来的样式的权重是0)
			如果权重都为0,那么谁描述的近那么就听谁的
-------------------------------------------------------------------------------------------------------
!important标记:
	用来给属性提高权重,提高的权重比id选择器的权重都要高。
		k:v!important;
	若同一标签的同一样式都有!important提升权重,那么就数原来的权重,	
		.div1{
			color:red !important;
		}
		#div{
			color: blue !important;
		}
		此时div为蓝色
	注: 但是无法提升继承过来的属性的权重。	
	div{
		color:red !important;
	}
	p{
		color:blue;
	}
	------------------------
	<div>
		<p>lalalala</p>
	</div>
	此时为蓝色,因为继承过来的属性权重为0,在提升也没用,
	提升权重不会影响继承属性的就近(谁离得要显示样式的标签近,就显示那个样式)显示的原则
	
	
	
	选中了标签比权重,权重相同谁写后边显示谁,
	没选中比权重,没选中权重又相同谁写下边显示谁,
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	