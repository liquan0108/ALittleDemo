盒模型:
    所有HTML元素可以看作盒子，CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。
	一个盒模型的5个重要属性:
	height:高度
		css中指的是内容的高度。IE 5 和 6 浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。
			解决IE8及更早版本不兼容问题可以在HTML页面声明 <!DOCTYPE html>即可。
	width:宽度
		css中指的是内容的宽度。盒子元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距
	padding:内边距 
		父子之间的距离(padding:2px 3px;上下 左右) (padding:2px 3px 4px;上 左右 下)赋值时用空格隔开
		若内容宽度固定,使用padding-left会撑大盒子,若内容自适应,则使用padding-left会使得内容宽度变小
	margin:外边距
		margin这个属性,本质上描述的是兄弟和兄弟之间的距离,父子之前不能用,父子之间的距离用父亲的padding,
	border:边框 (border-radius:15px;圆角边框);
		(1)可以给border添加样式、宽度和颜色。(给元素设置边框时,只有颜色有默认)
			一个border属性包含: border-width:;、border-style:;、border-color:;属性
			例: border:1px solid red; <=> border-width1px; border-style:solid; border-color:red;
		(2)border的四个边框:
			border-top:;、border-right:;、border-bottom:;、border-left:;
			可以给某个边框定义对应样式:
			  border-top:10px solid red;
	------------------------------------------------------------------------------------------
	一般的元素有默认的margin和paddding,一般开发网站会设置为0 
	h1,h2,div,ul{
		margin:0px;
		padding:0px;
	}
-------------------------------------------------------------------------------------------------------------
标准文档流:
	文档流指的是元素排版布局过程中，元素会默认自动从左往右，从上往下的流式排列方式。并最终窗体自上而下分成一行行，并在每行中从左至右的顺序排放元素。
	---------------------------------------------------------------------------
	块级元素和行内元素
	  1)块级元素:
		独占一行。
		有宽高。
		不设置宽高,默认撑满父亲。
	  2)行内元素:
	  与其他元素并排。
	  不能设置宽高、默认文字宽高
	  基本上所有文本级元素都是行内元素,p标签除外。
	------------------------------------------------------------------------------------------------
	块级元素-->行内元素	
	display:inline;(写在第一行)
	块级元素变为行内元素,此时设置宽高无效,
	----------------------------------------------------------------------------
	行内元素->块级元素
	display:block;(写在第一行)
	行内元素变为块级元素,独占一行。,可设置宽高
	-----------------------------------------------------------------------------------
	行内块:
	display:inline-block;
	是元素可与其他元素同行显示,并且可设置宽高
------------------------------------------------------------------------------------------
浮动(float):
	1)脱标(脱离标准文档流)
	给元素设置float属性后,元素脱离标准文档流,他后边的标准文档流中的元素自动顶上去,导致后边元素被覆盖
			(浮动元素的字围效果:只能覆盖住盒子,覆盖不住盒子中的文字)
	脱离标准文档流之后,标签不在区分行内、块,可以并排显示、可以设置宽高、不用再通过设置display设置宽高(出国了,不受display限制了,)
	盒子元素浮动时按照嵌套关系,从上到下进行浮动
	-------------------------------------------------------------------------------------------------
	2)浮动元素互相贴靠
	页面缩小时,空间缩小,会往前边相邻的元素下找位置,
	若前边相邻元素的width,前前边的width,则会掉下来,重启一行
	例:
	缩小页面时,4号会重起一行
	继续缩小,3号会出现在2号的下边
	在缩小1 2号在一行,3 4在一行,3在前
	-----    -----   ------   ------
	|	 |   |	 |   |  3 |   | 4   |
	|1 | |	 |2  |   |    |   |     |
	|	 |   -----   |    |   -------
	-----            |    |
					 ------
	-----------------------------------------------------------------------------------------------
	3)收缩
		浮动后的盒子模型,不设置宽度会自动缩进为内容的宽度,不浮动的盒子模型的宽度会撑满父亲
----------------------------------------------------------------------------------------------------------		
清除浮动:
	相邻浮动的盒子模型不设置高度且前边剩余宽度大于等于后边他儿子的宽度时,浮动的位置会产生错乱,有相邻浮动的盒子必须有height,否则关不住浮动的盒子元素,
--------盒子1------------
	-----           
	|   |    移动到此处       
	|   |           
	|   |           
	-----   ↑        	
	        ↑
	        ↑
---------盒子2-----------
	-----   ↑        
	|   |   ↑        
	|   |→ →↑           
	|   |           
	-----           

	清除这种异常浮动的方法:
	1)定义高度(height) 一般不定义。
	2)定义 clear:both ,清除浮动,谁异常浮动,就定义在谁那
	3)隔墙法 
	  在异常浮动的元素上方增加一个div,其属性要包含clear:both;
	   注:定义clear: both后有很大缺陷,就是这两个相邻浮动的盒子没有高,导致使用外边距margin时要减去上方盒子内容的宽度,
	     此时可以在中间定义一个div墙,给它设置高度来顶替margin产生效果,
		<div style="height:0px;width="100px"></div>             -----------------------------
		<div style="clear:both;height:10px; "></div>                --------------       
异常浮动<div style="height:0px;width="100px"></div>                 |            |  ↑↓height:10px; clear:both;
		                                                            --------------
		                                                        ------------------------------     
	4)内墙法
		 在父元素的最后下定义一个板子div,属性为clear:both;定义这个板子会撑起父亲的高度;异常浮动被顶下
		 再给这个板子设置大于子元素的高度height可形成margin效果,当height大于儿子的高度时会与下边的元素产生了距离,其类似下边距,
	注:父亲未脱标,儿子脱标了,且未定义内墙,此时儿子内容产生的高度的没法撑起父亲,	
		
	5)overflow:hidden;
		a.隐藏溢出，当内容超过其父元素时，可以使用该属性和值将溢出的部分裁剪掉，使页面更加美观
        b.清除浮动，当子元素浮动时，给父元素添加overflow：hidden，按照它的第一个特性，应该将子元素超出的部分截掉，
	      但是因为子元素有浮动，无法裁剪，所有只能由父元素增加高度去包裹住子元素，使得父元素拥有了高度，从而将异常浮动顶下
		  而这个高度是跟随子元素自适应的高度，这样就把浮动的子元素包含在父元素内了。


		
	--------------------------------------------------------------------------------------------------------------------------------
	浮动后相互贴靠,此时都使用  margin-left: 负值;  时,后边的会覆盖相应像素宽,因为第一个盒子左移后,第二个还是紧贴第一个盒子,此时第二个在左移会覆盖
		--------------------   
	   |         [|	        ] 
	   |         [|	        ]		
	   |         [|	        ]		
	   |         [|	        ]		
	   |         [|	        ]		
	   |         [|	        ] 	
		--------------------	
			
	此时想让第一个盒子覆盖第二个盒子,要使用相对定位(position:relative;不会脱标) 和 z-index 提高层级 		
		
		
		
		
		