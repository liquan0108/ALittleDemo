React中的组件: 解决html 标签构建应用的不足。
使用组件的好处：把公共的功能单独抽离成一个文件作为一个组件，哪里里使用哪里引入。
父子组件：组件的相互调用中，我们把调用者称为父组件，被调用者称为子组件
------------------------------------------------------------------------------------------------------------------------
父子组件传值：
    父组件给子组件传值: 
         在父组件中，我们引入子组件，通过给子组件添加属性(可以是多个属性)，属性的值为父组件的数据/方法/整个父组件, 从而起到传参的作用，子组件可以通过props获取父组件传过来的参数
		    1.在调用子组件的时候定义一个属性  <Header msg='首页'></Header>

		    2.子组件里面 this.props.msg          


    说明：父组件不仅可以给子组件传值，还可以给子组件传方法,以及把整个父组件传给子组件(<Child run={this} />)。
	-----------------------------------------------------------------------------------------------------------------------------------------
	子组件给父组件传值:
	    子组件向父组件传参，其实就是在父组件中给子组件添加一个属性，这个属性的内容为父组件的一个函数，这个函数接收到value后会改变父组件组件状态
		然后在子组件中调用这个函数，就会重新父组件的渲染页面
		父组件:传包含setState方法
				fatherMethod(value){
				     this.setState(data:value)
				}
	     render(){
			return (
				( <Chlid run={this.fatherMethod}/> )
			)
		 
		 }
		 子组件:
		    通过this.props进行接收
				childMethod(){
					this.props.run(value)
				}
				
				render(){
					return(
						<botton onClick={this.childMethod} > 子组件接收父组件传来的方法,并执行方法,执行方法时会改变父组件的state,
						然后父组件重写渲染页面,达到子组件传值给父组件的效果 </botton>
					)
				}
				
---------------------------------------------------------------------------------------------------------------------- 
父组件获取子组件的方法:
		父组件引入子组件,并添加ref属性, 然后在其他事件中通过this.refs.id.子组件方法名()来执行子组件的方法
		
		this.refs 会获取dom/子组件实例(需要dom/子组件加载完成后获取实例),
		
		子组件:
			class ChildComponent extends Component {
				run =() =>{
				    alert('子组件的run方法')
				}
				
			}
		父组件:		
				getChildMethod(){
						this.refs.childcomponent.run()
						
				}
				
				render(){
					return(
						<ChildComponent ref='childcomponent' />	
						<button onClick={this.getChildMethod} > 获取子组件的方法 </button>
					)
				}
			
---------------------------------------------------------------------------------------------------------------------- 
父组件向子组件传值的默认值和传值类型: 
定义在子组件的类外边
	class Child extends Component {
	   .........
	}
	Child.defaultProps = {
       toValue: "默认值"
    };
    Child.propTypes = {
        toValue: PropTypes.number
    };
    export default Child
	
	默认值:
	子组件类名.defaultProps = {
		子组件的属性名: 默认名   (当父组件不向子组件传值时会使用默认,反之使用传入的值)
	}
	

	传值类型:
	子组件类名.propTypes = {
		属性名: PropTypes.string
	}









	
	
	
	
	