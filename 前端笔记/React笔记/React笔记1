onKeyUP 事件 --  使用e.keyCode可获得键码,键码是数值型,不是string类型(13 为 回车键)
-------------------------------------------------------------------------------------------------------------------- 
type='checkbox' 多选按钮;调节大小时同时设置width和height才管用
-------------------------------------------------------------------------------------------------------------------- 
type='radio' 单选按钮
-------------------------------------------------------------------------------------------------------------------- 
数组中增加一个对象:
var value = this.state.value
 value.push(
    {
	 title:e.target.value,
	 zt: 'false'
	}
 )
---------------------------------------------------------------------------------------------------------------------  
删除数组元素:
val.splice(key,1);splice方法含头不含尾;返回删除的元素  
--------------------------------------------------------------------------------------------------------------------- 
  this.setState((prevState) => ({
      sum:  prevState.sum +1      //若sum为字符串类型时会拼接 '1',是数值型时会加 1
      })
  )
---------------------------------------------------------------------------------------------------------------------- 
 placeholder属性  (占位符)  title属性 (气泡)
---------------------------------------------------------------------------------------------------------------------- 
display :
	inline:
	使元素变成行内元素，与其他行内元素共享一行，不会独占一行.不能更改元素的height，width的值，大小由内容撑开. 
	可以使用padding，margin的left和right产生边距效果，但是top和bottom就不行.

	block:
	使元素变成块级元素，独占一行，在不设置自己的宽度的情况下，块级元素会默认填满父级元素的宽度. 
	能够改变元素的height，width的值. 
	可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果.
	
	 inline-block:
	 使元素变成行内元素，拥有行内元素的特性，即可以与其他行内元素共享一行，不会独占一行. 
	 能够改变元素的height，width的值. 
     可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果.
     注:用了display:inline-block后，存在间隙问题，这个问题产生的原因是换行引起的，写标签时在标签结束符后顺手打个回车，而回车会产生回车符，
	 回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，
	 去除空隙的方法：
　　 对父元素添加，{font-size:0}，即将字体大小设为0，那么那个空白符也变成0px，从而消除空隙
---------------------------------------------------------------------------------------------------------------------
缓存数据:  Storage:存储/仓库
		localStorage.setItem(key:string      ,      value:string             )	使用键值对缓存数据
		
		localStorage.setItem('TodoListValue',JSON.stringify(this.state.value))	 
		JSON.stringify()将数据装换成字符串
	 
读取缓存数据:
        JSON.parse(localStorage.getItem('TodoListValue'))	 
		
	    JSON.parse()将转换成字符串的数据解析回去
		localStorage.getItem(key:string) 通过key值获取字符串形式的缓存数据
---------------------------------------------------------------------------------------------------------------------	 




快速删除node_modules的方法


	全局安装rimraf：
		npm install rimraf -g
	到你的项目根目录下（即有node_modules的目录），执行命令：
		rimraf node_modules
















	 
