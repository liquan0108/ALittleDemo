state：
	不能再无状态组件中使用，定义在constructor中；
	constructor(){
		super(props);
		this.state = {
			name: '啦啦'
		}
	}

修改state：
	this.setState({
		name: '小样板'
	})
-------------------------------------------------------------------------------------	
转发 refs
		ref 表示当前组件的真正实例的引用，它会返回绑定当前属性的元素。
	使用：
		1.ref的赋值为字符串
				<input type='text' ref='texts' />		
				console.log(this.refs.texts)     =>   <input type='text'/>
		2.ref的赋值为回调函数
				// 将元素的实例通过回调函数赋值给data变量
				<input type='text' ref={ ref => {this.data = ref}}/>
				 console.log(this.data);         =>    <input type="text">
		3.React.createRef
---------------------------------------------------------------------------------------
this的指向：
	1.bind方式
	2.constructor中提前绑定
	3.箭头函数
	4.调用方式为箭头函数
		onClick = {() =>{this.run()}}
---------------------------------------------------------------------------------------
条件渲染：
	根据state的改变和一些条件来渲染页面
---------------------------------------------------------------------------------------
状态提升：
	React中的状态提升概括来说,就是将多个组件需要共享的状态提升到它们最近的父组件上.
	在父组件上改变这个状态然后通过props分发给子组件.
---------------------------------------------------------------------------------------
react脚手架	
---------------------------------------------------------------------------------------
父子组件传值：
	父 >  子
		可传方法、属性、整个父组件this。子组件通过this.props属性接收。
	子 >  父
		只可以传值。传值是通过父组件传来的setState来实现的
----------------------------------------------------------------------------------------
同级之间通信
	1.同一父级组件调用组件通过父级的state 和 子组件的 props 实现统计通讯
	2.使用pubsub事件订阅，实现组件通信
		2.1 react导入库
		npm install pubsub-js --save

		2.2 react 页面引入pubsubjs
		import PubSub from 'pubsub-js'

		2.3 pubsubjs使用
		发送消息：PubSub.publish(名称,传参)

		订阅消息：PubSub.subscrib(名称,(msg,data) => {})

		取消订阅：PubSub.unsubscrib(名称)